---
swagger: "2.0"
info:
  description: "This is a sample server my note book server.\n\n[Learn about Swagger](http://swagger.io)\
    \ or join the IRC channel `#swagger` on irc.freenode.net.\n\nFor this sample,\
    \ you can use the api key `special-key` to test the authorization filters\n"
  version: "1.0.0"
  title: "Swagger myNote"
  contact:
    name: "fengd@esquel.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v1"
schemes:
- "http"
- "https"
consumes:
- "application/json"
- "application/xml"
produces:
- "application/json"
- "application/xml"
paths:
  /note:
    post:
      tags:
      - "note"
      summary: "Add a new note"
      description: ""
      operationId: "addNote"
      parameters:
      - in: "body"
        name: "body"
        description: "Note object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Note"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      security:
      - azure_auth:
        - "write_notes"
        - "read_notes"
      x-swagger-router-controller: "Note"
  /note/{Id}:
    get:
      tags:
      - "note"
      summary: "Find note by ID"
      description: "Returns a note"
      operationId: "getNoteById"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      security:
      - azure_auth:
        - "write_notes"
        - "read_notes"
      x-swagger-router-controller: "Note"
    put:
      tags:
      - "note"
      summary: "Updates a note in the store with form data"
      description: ""
      operationId: "updateNoteWithForm"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "name"
        description: "Updated name of the pet"
        required: true
        schema:
          $ref: "#/definitions/Note"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      security:
      - azure_auth:
        - "write_notes"
        - "read_notes"
      x-swagger-router-controller: "Note"
    delete:
      tags:
      - "note"
      summary: "Deletes a note"
      description: ""
      operationId: "deleteNote"
      parameters:
      - name: "Id"
        in: "path"
        description: "Pet id to note"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      security:
      - azure_auth:
        - "write_notes"
        - "read_notes"
      x-swagger-router-controller: "Note"
  /note/findByTags:
    get:
      tags:
      - "note"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma seperated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "findNotesByTags"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      security:
      - azure_auth:
        - "write_notes"
        - "read_notes"
      x-swagger-router-controller: "Note"
  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "User"
  /users/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "User"
  /users/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: false
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /users/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /users/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "name that need to be deleted"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "User"
securityDefinitions:
  azure_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/api/oauth/dialog"
    flow: "implicit"
    scopes:
      write_notes: "modify notes in your account"
      read_notes: "read your notes"
definitions:
  Note:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      content:
        type: "string"
      createTime:
        type: "string"
        format: "date-time"
      createUser:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  BaseResponse:
    type: "object"
    properties:
      resultType:
        type: "string"
      results:
        type: "object"
        properties: {}
      resultMsg:
        type: "string"
      exceptionDetail:
        type: "object"
        properties: {}
  Tag:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
